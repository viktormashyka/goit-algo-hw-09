# У конспекті ми розглянули приклад про розбиття суми на монети. Маємо набір монет [50, 25, 10, 5, 2, 1]. 
# Уявіть, що ви розробляєте систему для касового апарату, яка повинна визначити оптимальний спосіб видачі решти покупцеві.
# Вам необхідно написати дві функції для касової системи, яка видає решту покупцеві:
# Функція динамічного програмування find_min_coins. Ця функція також повинна приймати суму для видачі решти, 
# але використовувати метод динамічного програмування, щоб знайти мінімальну кількість монет, необхідних для формування 
# цієї суми. Функція повинна повертати словник із номіналами монет та їх кількістю для досягнення заданої суми 
# найефективнішим способом. Наприклад, для суми 113 це буде словник {1: 1, 2: 1, 10: 1, 50: 2}

# Програмно реалізовано функцію, яка використовує принцип динамічного програмування. Код виконується і повертає словник 
# з номіналами монет та їх кількістю для досягнення заданої суми найефективнішим способом.

# На основі оцінювання часу виконання кожного з двох алгоритмів або О великого визначено найбільш ефективний при 
# великих сумах алгоритм.
# Зроблено висновки щодо ефективності алгоритмів для даного випадку. Висновки оформлено у вигляді файлу readme.md 
# домашнього завдання.

def find_min_coins:
    pass
