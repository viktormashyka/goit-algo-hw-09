# У конспекті ми розглянули приклад про розбиття суми на монети. Маємо набір монет [50, 25, 10, 5, 2, 1]. 
# Уявіть, що ви розробляєте систему для касового апарату, яка повинна визначити оптимальний спосіб видачі решти покупцеві.
# Вам необхідно написати дві функції для касової системи, яка видає решту покупцеві:
# Функція жадібного алгоритму find_coins_greedy. Ця функція повинна приймати суму, яку потрібно видати покупцеві, 
# і повертати словник із кількістю монет кожного номіналу, що використовуються для формування цієї суми. 
# Наприклад, для суми 113 це буде словник {50: 2, 10: 1, 2: 1, 1: 1}. 
# Алгоритм повинен бути жадібним, тобто спочатку вибирати найбільш доступні номінали монет.

# Програмно реалізовано функцію, яка використовує принцип жадібного алгоритму. Код виконується і повертає словник 
# з кількістю монет кожного номіналу, що використовуються для формування певної суми. Спочатку вибираються найбільш 
# доступні номінали монет.

# На основі оцінювання часу виконання кожного з двох алгоритмів або О великого визначено найбільш ефективний при 
# великих сумах алгоритм.
# Зроблено висновки щодо ефективності алгоритмів для даного випадку. Висновки оформлено у вигляді файлу readme.md 
# домашнього завдання.

def find_coins_greedy:
    pass